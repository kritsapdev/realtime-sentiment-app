# dashboard.py
import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash_extensions import WebSocket
import pandas as pd
import json
import plotly.graph_objects as go
import os

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å ---
# ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á Backend ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
backend_ws_url = os.environ.get("BACKEND_WS_URL")

# ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤ URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ô Log ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
print("--- DASHBOARD STARTUP ---")
print(f"Attempting to read BACKEND_WS_URL environment variable.")
print(f"Value received: '{backend_ws_url}' (Type: {type(backend_ws_url)})")
print("-------------------------")


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Dash
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ server ‡πÉ‡∏´‡πâ Waitress ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å

# ‡∏ô‡∏≥ Layout ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
def serve_layout():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ URL ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    if not backend_ws_url or not isinstance(backend_ws_url, str) or not backend_ws_url.startswith('wss://'):
        # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ, ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ wss:// ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Error
        print("ERROR: BACKEND_WS_URL is invalid or not set.")
        return html.Div([
            html.H1("Configuration Error", style={'color': 'red'}),
            html.P("The BACKEND_WS_URL environment variable is either not set or invalid."),
            html.P(f"Value received was: '{backend_ws_url}'")
        ])

    # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Dashboard ‡∏õ‡∏Å‡∏ï‡∏¥
    return dbc.Container([
        html.H1("üìä Real-time Product Review Sentiment Dashboard", className="my-4 text-center"),
        WebSocket(id="ws", url=backend_ws_url),
        dbc.Row([
            dbc.Col(dcc.Graph(id='sentiment-pie-chart'), md=4),
            dbc.Col([
                html.H4("Latest Reviews"),
                dash_table.DataTable(
                    id='live-update-table',
                    columns=[{'name': i.capitalize(), 'id': i} for i in ['text', 'label', 'score']],
                    data=[],
                    style_cell={'textAlign': 'left', 'padding': '10px'},
                    style_header={'fontWeight': 'bold'},
                    page_size=10,
                )
            ], md=8),
        ])
    ], fluid=True)

app.layout = serve_layout

# Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@app.callback(
    Output('live-update-table', 'data'),
    Output('sentiment-pie-chart', 'figure'),
    Input('ws', 'message'),
    State('live-update-table', 'data')
)
def update_data(message, existing_data):
    if not message:
        raise dash.exceptions.PreventUpdate

    try:
        new_row = json.loads(message['data'])
        updated_data = [new_row] + existing_data
        df_updated = pd.DataFrame(updated_data)
        sentiment_counts = df_updated['label'].value_counts()

        fig = go.Figure(data=[go.Pie(
            labels=sentiment_counts.index,
            values=sentiment_counts.values,
            marker_colors=['#28a745', '#dc3545', '#6c757d'], # Positive, Negative, Neutral
            hole=.3
        )])
        fig.update_layout(title_text='Sentiment Distribution', legend_title_text='Sentiment')

        return updated_data, fig
    except (json.JSONDecodeError, KeyError) as e:
        print(f"ERROR: Could not process incoming WebSocket message. Error: {e}. Message: {message}")
        raise dash.exceptions.PreventUpdate

# ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡∏≠‡∏ô Deploy)
if __name__ == '__main__':
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡πÄ‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    backend_ws_url = "ws://127.0.0.1:8000/ws" 
    print(f"INFO: Running in local debug mode. Connecting to {backend_ws_url}")
    app.run(debug=True, port=8050)

